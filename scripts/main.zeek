module VMWareRCE2022;

export {
	redef enum Log::ID += {
		LOG
	};
	type Info: record {
		ts: time &log;
		uid: string &log;
		successful: bool &log;
		response: string &log &optional;
	};
}

global encoded_regex = /%24%7b%22%66%72%65%65%6d%61%72%6b%65%72%2e%74%65%6d%70%6c%61%74%65%2e%75%74%69%6c%69%74%79%2e%45%78%65%63%75%74%65%22/i;
global regex = /\$\{"freemarker.template.utility.Execute"\?/i;
global uri_prefix = "/catalog-portal/ui/oauth/verify?";
global uids_to_fetch: set[string] &create_expire=30 secs;

event file_state_remove(f: fa_file)
{
	if ( ! f?$conns )
		return;
	if ( f$source != "HTTP" )
		return;
	for ( cid, c in f$conns ) {
		if ( ! c?$http )
			return;
		if ( ! c$http?$method )
			return;
		if ( c$http$method != "GET" )
			return;
		if ( ! c$http?$uri )
			return;

		local uri = c$http$uri;

		if ( encoded_regex in uri || regex in uri || starts_with(uri, uri_prefix) ) {
			local info = Info(
			    $ts=network_time(),
			    $uid=c$uid,
			    $successful=( c$http?$status_code && c$http$status_code == 200 ));
			if ( info$successful )
				info$response = f$bof_buffer;
			Log::write(LOG, info);
		}
	}
}

event zeek_init() &priority=5
{
	Log::create_stream(VMWareRCE2022::LOG, [
	    $columns=Info,
	    $path="cve_2022_22954"]);
}
