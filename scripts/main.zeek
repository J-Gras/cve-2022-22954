module VMWareRCE2022;

export {
	redef enum Notice::Type += { ExploitAttempt, ExploitSuccess };
}

global encoded_regex = /%24%7b%22%66%72%65%65%6d%61%72%6b%65%72%2e%74%65%6d%70%6c%61%74%65%2e%75%74%69%6c%69%74%79%2e%45%78%65%63%75%74%65%22/i;
global regex = /\$\{"freemarker.template.utility.Execute"\?/i;
global uri_prefix = "/catalog-portal/ui/oauth/verify?";
global uids_to_fetch: set[string] &create_expire=30 secs;

event file_sniff(f: fa_file, meta: fa_metadata)
	{
	if ( ! f?$conns )
		return;
	if ( f$source != "HTTP" )
		return;
	for ( cid, c in f$conns )
		{
		if ( ! c?$http )
			next;
		if ( ! c$http?$method )
			next;
		if ( c$http$method != "GET" )
			next;
		if ( ! c$http?$uri )
			next;
		if ( ! c?$uid )
			next;

		local uri = c$http$uri;

		if ( encoded_regex in uri || regex in uri || starts_with(uri, uri_prefix) )
			{
			local successful = c$http?$status_code && c$http$status_code == 400;
                        local buf = f?$bof_buffer ? f$bof_buffer : "";
			if ( successful )
				NOTICE([
                                  $note=ExploitSuccess,
                                  $msg=fmt("%s successfully exploited %s. See sub for uri/response.", c$id$orig_h, c$id$resp_h),
                                  $uid=c$uid,
                                  $sub=fmt("uri: %s; response: %s", uri, buf),
                                  $identifier=cat(c$id$orig_h, c$id$resp_h, uri)
                                ]);
			else
				NOTICE([
                                  $note=ExploitAttempt, $msg=fmt( "%s attempted to exploit %s. See sub for uri/response.", c$id$orig_h, c$id$resp_h),
                                  $uid=c$uid,
                                  $sub=fmt("uri: %s; response: %s", uri, buf),
                                  $identifier=cat(c$id$orig_h, c$id$resp_h, uri)
                                ]);
			}
		}
	}
